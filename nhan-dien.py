import time
import threading
import pygame
import cv2
import sqlite3
import os

# Kh·ªüi t·∫°o pygame mixer
pygame.mixer.init()

def play_sound(file_path):
    """ Ph√°t √¢m thanh n·∫øu kh√¥ng c√≥ √¢m thanh n√†o ƒëang ph√°t """
    if os.path.exists(file_path):
        pygame.mixer.music.load(file_path)
        pygame.mixer.music.play()
        print(f"üîä ƒêang ph√°t: {file_path}")
    else:
        print(f"‚ö†Ô∏è L·ªói: Kh√¥ng t√¨m th·∫•y file √¢m thanh {file_path}")

# Load b·ªô nh·∫≠n di·ªán khu√¥n m·∫∑t
face_cascade = cv2.CascadeClassifier('khuonMat.xml')
recognizer = cv2.face.LBPHFaceRecognizer_create()
recognizer.read("trainer/face-trainner.yml")

def getProfile(Id):
    """ L·∫•y th√¥ng tin t·ª´ database """
    conn = sqlite3.connect("FaceBase.db")
    cursor = conn.execute("SELECT * FROM People WHERE ID=?", (Id,))
    profile = cursor.fetchone()
    conn.close()
    return profile

# Kh·ªüi t·∫°o camera
# camera_url = "http://172.16.12.24:8080/video"
# cap = cv2.VideoCapture(camera_url)
# cap.set(cv2.CAP_PROP_FOURCC, cv2.VideoWriter_fourcc(*"MJPG"))
cap = cv2.VideoCapture(0)
font = cv2.FONT_HERSHEY_COMPLEX

# Bi·∫øn theo d√µi th·ªùi gian
last_known_id = None  # L∆∞u ID g·∫ßn nh·∫•t
stop_greeting = False  # D·ª´ng ch√†o h·ªèi khi g·∫∑p unknown

def greeting_thread():
    """ Lu·ªìng ch·∫°y li√™n t·ª•c ƒë·ªÉ ph√°t √¢m thanh ch√†o ng∆∞·ªùi quen m·ªói 4 gi√¢y """
    global last_known_id, stop_greeting
    while True:
        if last_known_id and not stop_greeting:
            play_sound("_hello.mp3")
        time.sleep(4)

# B·∫Øt ƒë·∫ßu lu·ªìng ph√°t √¢m thanh ch√†o
threading.Thread(target=greeting_thread, daemon=True).start()

while True:
    ret, img = cap.read()
    if not ret:
        print("‚ùå Kh√¥ng th·ªÉ l·∫•y khung h√¨nh t·ª´ camera")
        break
    
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    faces = face_cascade.detectMultiScale(gray, 1.3, 5)

    found_known = False  # Bi·∫øn ki·ªÉm tra c√≥ ng∆∞·ªùi quen kh√¥ng

    for (x, y, w, h) in faces:
        cv2.rectangle(img, (x, y), (x + w, y + h), (0, 255, 0), 2)
        roi_gray = gray[y:y + h, x:x + w]
        
        nbr_predicted, conf = recognizer.predict(roi_gray)
        print(f"Nh·∫≠n di·ªán: ID={nbr_predicted}, ƒê·ªô ch√≠nh x√°c={conf}(C√†ng th·∫•p c√†ng ch√≠nh x√°c)")

        if conf < 50:  # Nh·∫≠n di·ªán ch√≠nh x√°c
            profile = getProfile(nbr_predicted)
            if profile:
                name = profile[1]
                cv2.putText(img, name, (x + 10, y), font, 1, (0, 255, 0), 1)
                
                last_known_id = nbr_predicted
                found_known = True  # ƒê√°nh d·∫•u ƒë√£ nh·∫≠n di·ªán ng∆∞·ªùi quen
                stop_greeting = False  # Cho ph√©p ph√°t √¢m thanh ch√†o ti·∫øp t·ª•c

        else:  # Ng∆∞·ªùi l·∫°
            cv2.putText(img, "Unknown", (x, y + h + 30), font, 0.6, (0, 0, 255), 2)
            
            # N·∫øu ph√°t hi·ªán ng∆∞·ªùi l·∫°, d·ª´ng ph√°t √¢m thanh ch√†o
            stop_greeting = True

            # Ph√°t √¢m thanh c·∫£nh b√°o m·ªói 9 gi√¢y
            if time.time() - last_known_id >= 9:
                print("üö® Ph√°t √¢m thanh c·∫£nh b√°o ng∆∞·ªùi l·∫°")
                play_sound("_alert.mp3")
                last_known_id = time.time()

    # N·∫øu kh√¥ng t√¨m th·∫•y ng∆∞·ªùi quen trong khung h√¨nh, d·ª´ng ph√°t √¢m thanh ch√†o
    if not found_known:
        stop_greeting = True

    cv2.imshow('Nh·∫≠n di·ªán khu√¥n m·∫∑t', img)
    if cv2.waitKey(1) == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()
